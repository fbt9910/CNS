name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version tag, e.g. v6.0.0'
        required: true
        default: 'v6.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, arm, mips, mipsle, mips64, mips64le]
        exclude:
          # Darwin 平台只支持 amd64 和 arm64
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: mips
          - goos: darwin
            goarch: mipsle
          - goos: darwin
            goarch: mips64
          - goos: darwin
            goarch: mips64le
          # Windows 平台排除不支持的 MIPS 架构
          - goos: windows
            goarch: mips
          - goos: windows
            goarch: mipsle
          - goos: windows
            goarch: mips64
          - goos: windows
            goarch: mips64le
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: false

      - name: Build binaries
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o CNS-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -lh CNS-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CNS-${{ matrix.goos }}-${{ matrix.goarch }}
          path: CNS-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code for tag creation
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录及所有 tags

      - name: Create tag if not exists
        run: |
          git fetch --tags
          if git rev-parse ${{ github.event.inputs.version }} >/dev/null 2>&1; then
            echo "Tag ${{ github.event.inputs.version }} already exists"
          else
            git tag ${{ github.event.inputs.version }}
            git push origin ${{ github.event.inputs.version }}
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          files: artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
